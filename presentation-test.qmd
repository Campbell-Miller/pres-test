---
title: "Regular Expressions"
subtitle: "(regex)"
format: 
  revealjs:
    theme: blood
    transition: fade
editor: visual
---

## What are Regular Expressions?

```{r}
#| label: packages-and-settings
#| echo: false
knitr::opts_chunk$set(warning = FALSE,
                      message = FALSE,
                      cache = TRUE
                      )
```

::: incremental
-   This is just a brief jaunt into a very large and important topic.

-   Generally they are used to *parse text*.

-   You write a *pattern* that can then be used to match occurrences of that *pattern* in a character string or a vector of character strings.

-   Used through dozens of ways in R: grep, grepl, regexpr, gsub, and the stringr functions such as: strsplit, str_view, etc.
:::

## Uses

::: incremental
-   After writing a pattern, a body of text can be parsed and then

    -   searched
    -   replaced
    -   validated
    -   extracted
    -   mutated

-   Extremely valuable for large scale data searching for specific information (surveys).

-   Use in professional world example.
:::

## Examples Using stringr Commands

::: incremental
-Match a string to pattern of letters.

```{r, echo = TRUE, results = 'hide'}
library(htmlwidgets)
library(stringr)
x <- c("apple", "banana", "pear")
str_view(x, "an")
```

apple

b`an`ana

pear

-Use '.' to match any character.

```{r, echo = TRUE, results = 'hide'}
str_view(x, ".a.")
```

apple

`ban`ana

p`ear`

```{r, echo = TRUE}
str_count(x, "a")
```
:::

## Continued

```{r, echo = TRUE}
#Count length
y <- c("why", "video", "cross", "extra", "deal", "authority")
str_length(y) 
#> [1] 3 5 5 5 4 9

```

```{r, echo = TRUE}
#Subset starting at first character and ending at second character
str_sub(y, 1, 2)
#> [1] "wh" "vi" "cr" "ex" "de" "au"
```

-   The regular expression "\[aeiou\]" matches any vowel

```{r, echo = TRUE}
str_detect(y, "[aeiou]")
```

```{r, echo = TRUE}
#Replace first instance of vowel with a ? in each word
str_replace(y, "[aeiou]", "?")
#> [1] "why"       "v?deo"     "cr?ss"     "?xtra"     "d?al"      "?uthority"
```

## Escape Character

::: incremental
-   We saw previously that using a '.' matches any character, so what happens when we want to search for a '.' in our text?
    -   `\` escapes special behaviors so we can match a '.' by writing `\.`
    -   This leads to another problem since strings also use `\` as an escape character and the regular expression is written as a string.
    -   Actually need to write `\\.`
:::

## Real World Example {.scrollable}

-   Software update parsing.

-   `"^[0-9]+\.[0-9]+\.[0-9]+"`

    -   The carat `^` matches the literal start of line.
    -   `[0-9]` is a kind of specified wildcard, it says the character here can match any digit zero through nine.
    -   `+` is a special character that extends the previous argument in the string (\[0-9\]) and says to match it at least once and then for as many times as it positively matches.
    -   `\` is the escape character, it says 'treat the following argument as a string literal, not as a special character'.

-   Matches start of line, one or more of the digits of zero through nine, a period, one or more digits of zero through nine, a period, one or more digits of zero through nine.

-   It will match any of these, and more: 1.0.5, 15.154.42, 0.0.5.

::: aside
Example taken from user 'Sithrazer' on reddit.
:::

## RegExplain

-Helpful R installation that can help you learn regular expressions, website [here](https://www.garrickadenbuie.com/project/regexplain/)

-   To install just type in R `devtools::install_github("gadenbuie/regexplain")`
    -   I had to update Rtools on windows [here](https://cran.r-project.org/bin/windows/Rtools/)
-   Quick demo in R

## regexr

-Another useful site for visualization [here](https://regexr.com/)

## Summary

::: incremental
-   Regular expressions are essential for parsing through large amounts of text.
-   Can identify/replace/manipulate all forms of the regular expression at once.
-   Makes tasks very easy if data is formatted in the same manner (social security, phone numbers, addresses).
-   The code for a regular expression will almost always be significantly smaller than the code to do the same function without a regex.
-   Understanding the syntax can be useful in professional outlets to see what is being done.
:::

## Useful Links

-   [Reddit r/regex](https://www.reddit.com/r/regex/)
-   [Learn Regular Expressions in 20 Mins](https://www.youtube.com/watch?v=rhzKDrUiJVk&ab_channel=WebDevSimplified)
-   [R for Data Science Chapter on Strings](https://r4ds.had.co.nz/strings.html)
-   [Regular Expressions vignette](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html)
-   [Demystifying Regular Expressions (great visualiztion of what R commands are doing)](https://blog.rsquaredacademy.com/regular-expression-in-r/)
-   [regexr](https://regexr.com/)
-   [RegExplain](https://www.garrickadenbuie.com/project/regexplain/)
-   [Tutorial walkthrough of some functions in R](https://github.com/STAT545-UBC/STAT545-UBC-original-website/blob/master/block022_regular-expression.md)
